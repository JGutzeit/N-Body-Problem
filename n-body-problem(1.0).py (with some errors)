import math
import matplotlib.pyplot as plt
import time
from datetime import timedelta
from tqdm import tqdm


# Alle Berechnungen und Einheiten Basieren auf den Regulären SI Einheiten (t = sekunden, Masse = KG...)


Simulierte_Zeit_sekunden = 10**7 # Die Zeitdauer, welche die simulation durchlaufen soll
G = 6.6730*10**-11 # Die Gravitationskonstante
dt = 1 # Die Grösse des Zeitintervalls (meist dt)

d1 = 12756 # Der Durchmesser der Masse 1
m1 = 88 # Die Masse 1 (in KG)
vx1 = 0 # Die Anfangs Geschwindigkeit auf der X Achse der Masse 1
vy1 = 90 # Die Anfangs Geschwindigkeit auf der Y Achse der Masse 1
x1 = 0 # Die Anfangs Position der Masse 1 (auf der X Achse)
y1 = 0 # Die Anfangs Position der Masse 1 (auf der Y Achse)
 
d2 = 5 # Der Durchmesser der Masse 2
m2 = 70 # Die Masse 2 (in KG)
vx2 = 0 # Die Anfangs Geschwindigkeit auf der X Achse der Masse 2
vy2 = 6000 # Die Anfangs Geschwindigkeit auf der Y Achse der Masse 2
x2 = 300000 +(d1*0.5) # Die Anfangs Position der Masse 2 (auf der X Achse)
y2 = 0 # Die Anfangs Position der Masse 2 (auf der Y Achse)

d3 = 109 # Der Durchmesser der Masse 3
m3 = 450000 #  Die Masse 3  (in KG)
vx3 = 0 # Die Anfangs Geschwindigkeit auf der X Achse der Masse 3
vy3 = 7660 * 1.403 # Die Anfangs Geschwindigkeit auf der Y Achse der Masse 3
x3 = 408000 +(d1*0.5) #  Die Anfangs Position der Masse 3 (auf der X Achse)
y3 = 0 # Die Anfangs Position der Masse 3 (auf der Y Achse)


X1_Achse=[] 
X2_Achse=[] 
X3_Achse=[] 
Y1_Achse=[]
Y2_Achse=[]
Y3_Achse=[]
anzahl_intervalle=0 
r12 = math.sqrt((abs(x1-x2)**2)+(abs(y1-y2)**2)) # Abstand (r) der Masse 1 zu Masse 2
r13 = math.sqrt((abs(x1-x3)**2)+ (abs(y1-y2)**2)) # Abstand (r) der Masse 1 zu Masse 3
r23 = math.sqrt((abs(x2-x3)**2)+(abs(y1-y2)**2)) # Abstand (r) der Masse 2 zu Masse 3

for i in tqdm(range(int(Simulierte_Zeit_sekunden/dt))): # Anzahl der Loop durchläufe
    
    
    if r12<=(d1+d2)*0.5 or r13<=(d1+d3)*0.5 or r23<=(d2+d3)*0.5: # Wenn sich die Körper berühren, dann bricht es ab
        print("Kollision bei anzahl intervalle =",anzahl_intervalle) 
        break 
    else:
        anzahl_intervalle+=dt
    
        r12 = math.sqrt((abs(x1-x2)**2)+(abs(y1-y2)**2)) # Abstand (r) der Masse 1 zu Masse 2
        r13 = math.sqrt((abs(x1-x3)**2)+ (abs(y1-y2)**2)) # Abstand (r) der Masse 1 zu Masse 3
        r23 = math.sqrt((abs(x2-x3)**2)+(abs(y1-y2)**2)) # Abstand (r) der Masse 2 zu Masse 3
    
        Fmx1 = ((G*m1*m2)/(r12**2)) + ((G*m1*m3)/(r13**2)) # Kraft die auf die Masse 1 auf der X Achse einwirkt (die kraft von (Masse 1 und Masse 2)+ (Masse 1 und Masse 3))
        Fmx2 = ((G*m2*m1)/(r12**2)) + ((G*m2*m3)/(r23**2)) #  Kraft die auf die Masse 2 auf der X Achse einwirkt (die kraft von (Masse 2 und Masse 1)+ (Masse 2 und Masse 3))
        Fmx3 = ((G*m3*m1)/(r13**2)) + ((G*m3*m2)/(r23**2)) #  Kraft die auf die Masse 3 auf der X Achs einwirkt (die kraft von (Masse 3 und Masse 1)+ (Masse 3 und Masse 2))
        
        Fmy1 = ((G*m1*m2)/(r12**2)) + ((G*m1*m3)/(r13**2)) #  Kraft die auf die Masse 1 auf der Y Achse einwirkt (die kraft von (Masse 1 und Masse 2)+ (Masse 1 und Masse 3))
        Fmy2 = ((G*m2*m1)/(r12**2)) + ((G*m1*m3)/(r23**2)) #  Kraft die auf die Masse 2 auf der Y Achse einwirkt (die kraft von (Masse 2 und Masse 1)+ (Masse 2 und Masse 3))
        Fmy3 = ((G*m3*m1)/(r13**2)) + ((G*m1*m3)/(r23**2)) #  Kraft die auf die Masse 3 auf der Y Achse 1einwirkt (die kraft von (Masse 3 und Masse 1)+ (Masse 3 und Masse 2))
            
        amx1 = Fmx1/m1 # Die Beschleunigung der Masse 1 auf der X Achse
        amx2 = Fmx2/m2 # Die Beschleunigung der Masse 2 auf der X Achse
        amx3 = Fmx3/m3 # Die Beschleunigung der Masse 3 auf der X Achse
        amy1 = Fmy1/m1 # Die Beschleunigung der Masse 1 auf der Y Achse
        amy2 = Fmy2/m2 # Die Beschleunigung der Masse 2 auf der Y Achse
        amy3 = Fmy3/m3 # Die Beschleunigung der Masse 3 auf der Y Achse
    
        vx1 = vx1 + amx1*dt # Die Geschwindigkeit der Masse 1 auf der X Achse
        vx2 = vx2 + amx2*dt # Die Geschwindigkeit der Masse 2 auf der X Achse
        vx3 = vx3 + amx3*dt # Die Geschwindigkeit der Masse 3 auf der X Achse
        vy1 = vy1 + amy1*dt # Die Geschwindigkeit der Masse 1 auf der Y Achse
        vy2 = vy2 + amy2*dt # Die Geschwindigkeit der Masse 2 auf der Y Achse
        vy3 = vy3 + amy3*dt # Die Geschwindigkeit der Masse 3 auf der Y Achse
    
        x1 = x1 + vx1*dt # Die neue Position der Masse 1 (X Achse)
        x2 = x2 + vx2*dt # Die neue Position der Masse 2 (X Achse)
        x3 = x3 + vx3*dt # Die neue Position der Masse 3 (X Achse)
        y1 = y1 + vy1*dt # Die neue Position der Masse 1 (Y Achse)
        y2 = y2 + vy2*dt # Die neue Position der Masse 2 (Y Achse)
        y3 = y3 + vy3*dt # Die neue Position der Masse 3 (Y Achse)
    
        X1_Achse.append(x1) 
        X2_Achse.append(x2) 
        X3_Achse.append(x3) 
        Y1_Achse.append(y1) 
        Y2_Achse.append(y2)
        Y3_Achse.append(y3)

plt.plot(X1_Achse, Y1_Achse, label="erde", color="red") 
plt.plot(X2_Achse, Y2_Achse, label="ich", color="green") 
plt.plot(X3_Achse, Y3_Achse, label="iss", color="blue") 
plt.axhline(0, color="black", linewidth=0.5)
plt.axvline(0, color="black", linewidth=0.5)
plt.title("several-body-problem") 
plt.xlabel("X (m)") 
plt.ylabel("Y (m)") 
plt.gca().axis("equal")
plt.grid()
plt.legend()
plt.show()


